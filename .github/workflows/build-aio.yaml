name: Build & Publish All-in-One

on:
  push:
    branches: [main]
    tags: [v*]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BIN_NAME: spage
  BIN_OUT: build
  REGISTRY_URLS: ghcr.io docker.io reg.liteyuki.org
  REGISTRY_USERS: ${{ secrets.GHCR_USER }} ${{ secrets.DOCKERHUB_USER }} ${{ secrets.LITEYUKIHARBOR_USER }}
  REGISTRY_TOKENS: ${{ secrets.GHCR_TOKEN }} ${{ secrets.DOCKERHUB_TOKEN }} ${{ secrets.LITEYUKIHARBOR_TOKEN }}
  REGISTRY_NAMESPACES: liteyukistudio/spage liteyukistudio/spage spage/spage

concurrency:
  group: 'build-aio'
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
      # 调试期间关掉前端构建
      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 22

      # - name: Build frontend
      #   run: |
      #     cd web-src
      #     npm install pnpm -g
      #     pnpm install
      #     pnpm build
      #     cp -r out/* ../static/dist/

      - name: Build Go binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p ${{ env.BIN_OUT }}/${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BIN_NAME="${{ env.BIN_NAME }}.exe"
          else
            BIN_NAME="${{ env.BIN_NAME }}"
          fi
          go build -o ${{ env.BIN_OUT }}/${{ matrix.goos }}-${{ matrix.goarch }}/$BIN_NAME ./cmd/server

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.BIN_OUT }}/${{ matrix.goos }}-${{ matrix.goarch }}/${{ env.BIN_NAME }}*

  publish:
    name: Publish Artifacts & Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 下载所有产物用于 Release
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts for release
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.BIN_NAME }}-*
          path: ${{ env.BIN_OUT }}

      # 只下载 linux 产物用于镜像构建
      - name: Download linux artifacts for image
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.BIN_NAME }}-linux-*
          path: ${{ env.BIN_OUT }}

      - name: Set version/tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            TAG="${VERSION}"
            NIGHTLY="false"
          else
            VERSION="${GITHUB_SHA}"
            TAG="nightly"
            NIGHTLY="true"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "nightly=${NIGHTLY}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container images (multi-registry, multi-arch)
        env:
          TAG: ${{ steps.version.outputs.tag }}
          REGISTRY_URLS: ${{ env.REGISTRY_URLS }}
          REGISTRY_USERS: ${{ env.REGISTRY_USERS }}
          REGISTRY_TOKENS: ${{ env.REGISTRY_TOKENS }}
          REGISTRY_NAMESPACES: ${{ env.REGISTRY_NAMESPACES }}
        run: |
          IFS=' ' read -r -a urls <<< "$REGISTRY_URLS"
          IFS=' ' read -r -a users <<< "$REGISTRY_USERS"
          IFS=' ' read -r -a tokens <<< "$REGISTRY_TOKENS"
          IFS=' ' read -r -a namespaces <<< "$REGISTRY_NAMESPACES"

          for i in "${!urls[@]}"; do
            url="${urls[$i]}"
            user="${users[$i]}"
            token="${tokens[$i]}"
            namespace="${namespaces[$i]}"
            imagename="$url/$namespace:$TAG"
            echo "$token" | docker login "$url" -u "$user" --password-stdin
            docker buildx build --platform linux/amd64,linux/arm64 -f ./Dockerfile -t "$imagename" --push .
            if [[ "${{ steps.version.outputs.nightly }}" == "false" ]]; then
              docker buildx build --platform linux/amd64,linux/arm64 -f ./Dockerfile -t "$url/$namespace:latest" --push .
            fi
          done

      - name: Publish GitHub Release
        if: ${{ steps.version.outputs.nightly == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            Release ${{ steps.version.outputs.tag }}
            Built from tag ${{ steps.version.outputs.tag }}
          files: |
            ${{ env.BIN_OUT }}/**/${{ env.BIN_NAME }}*